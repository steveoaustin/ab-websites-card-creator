{"version":3,"sources":["App.tsx","serviceWorker.js","index.tsx","Media/abLight.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","title","phone","_this2","react_default","a","createElement","id","type","placeholder","value","onChange","e","setState","target","src","logo","className","index_es","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"2SAsFeA,cAzEb,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAPRQ,WAMwB,EAEtBP,EAAKO,MAAQ,CACXC,KAAM,GACNC,MAAO,GACPC,MAAO,IALaV,wEASf,IAAAW,EAAAR,KACP,OACES,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBACNH,EAAAC,EAAAC,cAAA,QAAMC,GAAG,QACPH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLR,KAAK,OACLS,YAAY,OACZC,MAAOf,KAAKI,MAAMC,KAClBW,SAAU,SAAAC,GAAC,OAAIT,EAAKU,SAAS,CAAEb,KAAMY,EAAEE,OAAOJ,WAEhDN,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLR,KAAK,QACLS,YAAY,QACZC,MAAOf,KAAKI,MAAME,MAClBU,SAAU,SAAAC,GAAC,OAAIT,EAAKU,SAAS,CAAEZ,MAAOW,EAAEE,OAAOJ,WAEjDN,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLR,KAAK,QACLS,YAAY,QACZC,MAAOf,KAAKI,MAAMG,MAClBS,SAAU,SAAAC,GAAC,OAAIT,EAAKU,SAAS,CAAEX,MAAOU,EAAEE,OAAOJ,aAKrDN,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBACNH,EAAAC,EAAAC,cAAA,OAAKS,IAAKC,IAAMT,GAAG,UAErBH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAAR,uBAEAH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOU,UAAU,QACtBtB,KAAKI,MAAMC,MAEdI,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQU,UAAU,QACvBtB,KAAKI,MAAME,OAEdG,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUU,UAAU,QAC1Bb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMD,UAAU,QAAhB,YADF,mBAGAb,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQU,UAAU,QACxBb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMX,GAAG,YAAYU,UAAU,QAA/B,SAGCtB,KAAKI,MAAMG,OAGdE,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQU,UAAU,QACxBb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMD,UAAU,QAAhB,SADF,4CArEIE,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.6a26ff31.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport { string } from \"prop-types\";\nimport logo from \"./Media/abLight.svg\";\nimport { Icon } from \"@material-ui/core\";\n\nclass App extends Component {\n  state: {\n    name: string;\n    title: string;\n    phone: string;\n  };\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      name: \"\",\n      title: \"\",\n      phone: \"\"\n    };\n  }\n\n  render() {\n    return (\n      <div id=\"app\">\n        <div id=\"formContainer\">\n          <form id=\"form\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Name\"\n              value={this.state.name}\n              onChange={e => this.setState({ name: e.target.value })}\n            />\n            <input\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Title\"\n              value={this.state.title}\n              onChange={e => this.setState({ title: e.target.value })}\n            />\n            <input\n              type=\"text\"\n              name=\"phone\"\n              placeholder=\"Phone\"\n              value={this.state.phone}\n              onChange={e => this.setState({ phone: e.target.value })}\n            />\n          </form>\n        </div>\n\n        <div id=\"cardContainer\">\n          <div id=\"card\">\n            <div id=\"logoContainer\">\n              <img src={logo} id=\"logo\" />\n            </div>\n            <div id=\"subtext\">Website Development</div>\n\n            <div id=\"name\" className=\"text\">\n              {this.state.name}\n            </div>\n            <div id=\"title\" className=\"text\">\n              {this.state.title}\n            </div>\n            <div id=\"website\" className=\"text\">\n              <Icon className=\"icon\">language</Icon>ab-websites.com\n            </div>\n            <div id=\"info\">\n              <div id=\"phone\" className=\"text\">\n                <Icon id=\"phoneIcon\" className=\"icon\">\n                  phone\n                </Icon>\n                {this.state.phone}\n              </div>\n\n              <div id=\"email\" className=\"text\">\n                <Icon className=\"icon\">email</Icon>austinburkewebsites@gmail.com\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/abLight.e6f27088.svg\";"],"sourceRoot":""}